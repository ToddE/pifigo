#!/bin/bash
# Always exit on error
set -e

CONFIG_FILE="/etc/pifigo/config.yaml"
HOTSPOT_NETPLAN_FILE="/etc/netplan/01-pifigo-hotspot.yaml"

# --- Helper function to read a value from the YAML config file ---
get_yaml_value() {
    # This simple grep/sed is good enough for this script.
    grep "^$1:" "$CONFIG_FILE" | sed "s/^$1: *//; s/\"//g" | tr -d '\r'
}

# --- Helper function to check for a working WLAN connection ---
check_wlan_connection() {
    WLAN_IFACE=$(get_yaml_value "wireless_interface")
    if [ -z "$WLAN_IFACE" ]; then
        echo "Could not read wireless_interface from config. Assuming offline."
        return 1
    fi

    echo "Checking for internet connectivity on interface: $WLAN_IFACE"
    if curl --interface "$WLAN_IFACE" --head --silent --fail --max-time 5 "http://www.google.com" > /dev/null; then
        echo "Success: The interface $WLAN_IFACE has a working internet connection."
        return 0
    else
        echo "Failure: The interface $WLAN_IFACE cannot reach the internet."
        return 1
    fi
}

# --- Main Installation Logic ---

echo "Running post-installation script for pifigo..."

# --- NEW: Resolve conflict with systemd-resolved ---
echo "Checking for network service conflicts..."
if systemctl is-active --quiet systemd-resolved.service; then
    echo "Disabling systemd-resolved to allow dnsmasq to run..."
    systemctl stop systemd-resolved.service
    systemctl disable systemd-resolved.service
fi

# Unmask and enable dnsmasq, which is required for the hotspot.
if systemctl is-enabled --quiet dnsmasq.service | grep -q "masked"; then
    echo "Unmasking dnsmasq.service..."
    systemctl unmask dnsmasq.service
fi
echo "Ensuring dnsmasq service is enabled..."
systemctl enable dnsmasq.service
# --- END NEW SECTION ---


# 1. Update the hotspot netplan file with values from the main config
echo "Configuring default hotspot settings..."
AP_SSID=$(get_yaml_value "ap_ssid")
AP_PASSWORD=$(get_yaml_value "ap_password")
AP_IP=$(get_yaml_value "ap_ip_address")
AP_CHANNEL=$(get_yaml_value "ap_channel")
WLAN_IFACE=$(get_yaml_value "wireless_interface")

sed -i "s|__PIFIGO_INTERFACE__|${WLAN_IFACE}|g" "$HOTSPOT_NETPLAN_FILE"
sed -i "s|__PIFIGO_AP_IP__|${AP_IP}|g" "$HOTSPOT_NETPLAN_FILE"
sed -i "s|__PIFIGO_AP_SSID__|${AP_SSID}|g" "$HOTSPOT_NETPLAN_FILE"
sed -i "s|__PIFIGO_AP_PASSWORD__|${AP_PASSWORD}|g" "$HOTSPOT_NETPLAN_FILE"
sed -i "s|__PIFIGO_AP_CHANNEL__|${AP_CHANNEL}|g" "$HOTSPOT_NETPLAN_FILE"

# 2. Reload systemd to make it aware of the new pifigo.service file.
echo "Reloading systemd daemon..."
systemctl daemon-reload

# 3. Check the system's network state.
if check_wlan_connection; then
    # SCENARIO A: INTERNET CONNECTION EXISTS
    echo "Existing Wi-Fi connection detected."
    systemctl enable pifigo.service
    echo "Installation complete. pifigo will start on the next boot if this connection fails."
else
    # SCENARIO B: NO INTERNET CONNECTION
    echo "No existing Wi-Fi connection detected. Starting pifigo in hotspot mode."
    systemctl enable --now pifigo.service
    echo "Installation complete. The pifigo hotspot should be active."
    echo "It is recommended to reboot the device to ensure a clean network state."
fi

exit 0
